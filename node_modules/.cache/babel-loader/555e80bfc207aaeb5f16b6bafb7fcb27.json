{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(key, value) {\n        var options,\n            params,\n            res,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n                if (!(typeof key !== 'string')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('Invalid key type');\n\n              case 3:\n                params = _objectSpread({\n                  arg: [key, value]\n                }, options);\n\n                if (typeof value === 'boolean') {\n                  params.arg[1] = value.toString();\n                  params.bool = true;\n                } else if (typeof value !== 'string') {\n                  params.arg[1] = JSON.stringify(value);\n                  params.json = true;\n                }\n\n                _context.next = 7;\n                return api.post('config', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  searchParams: toUrlSearchParams(params),\n                  headers: options.headers\n                });\n\n              case 7:\n                res = _context.sent;\n                _context.t0 = toCamel;\n                _context.next = 11;\n                return res.json();\n\n              case 11:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}
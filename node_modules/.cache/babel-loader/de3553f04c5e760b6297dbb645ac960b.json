{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/vishwa/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/vishwa/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar raw = require('ipld-raw');\n\nvar configure = require('../lib/configure');\n\nvar resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\nmodule.exports = configure(function (api, options) {\n  var getBlock = require('../block/get')(options);\n\n  var dagResolve = require('./resolve')(options);\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(cid) {\n        var options,\n            resolved,\n            block,\n            dagResolver,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return dagResolve(cid, options);\n\n              case 3:\n                resolved = _context.sent;\n                _context.next = 6;\n                return getBlock(resolved.cid, options);\n\n              case 6:\n                block = _context.sent;\n                dagResolver = resolvers[resolved.cid.codec];\n\n                if (dagResolver) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw Object.assign(new Error(\"Missing IPLD format \\\"\".concat(resolved.cid.codec, \"\\\"\")), {\n                  missingMulticodec: resolved.cid.codec\n                });\n\n              case 10:\n                if (resolved.cid.codec === 'raw' && !resolved.remPath) {\n                  resolved.remainderPath = '/';\n                }\n\n                return _context.abrupt(\"return\", dagResolver.resolve(block.data, resolved.remainderPath));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}
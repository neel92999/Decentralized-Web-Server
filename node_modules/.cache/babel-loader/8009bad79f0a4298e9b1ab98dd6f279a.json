{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar dagPB = require('ipld-dag-pb');\n\nvar ipldRaw = require('ipld-raw');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar anySignal = require('any-signal');\n\nvar AbortController = require('abort-controller').default;\n\nvar multicodec = require('multicodec');\n\nmodule.exports = configure(function (api, opts) {\n  var _formats;\n\n  var formats = (_formats = {}, _defineProperty(_formats, multicodec.DAG_PB, dagPB), _defineProperty(_formats, multicodec.DAG_CBOR, dagCBOR), _defineProperty(_formats, multicodec.RAW, ipldRaw), _formats);\n  var ipldOptions = opts && opts.ipld || {};\n  var configuredFormats = ipldOptions && ipldOptions.formats || [];\n  configuredFormats.forEach(function (format) {\n    formats[format.codec] = format;\n  });\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dagNode) {\n        var options,\n            cid,\n            number,\n            format,\n            serialized,\n            controller,\n            signal,\n            res,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n                if (!(options.cid && (options.format || options.hashAlg))) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n              case 5:\n                if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n              case 7:\n                if (options.cid) {\n                  cid = new CID(options.cid);\n                  options = _objectSpread({}, options, {\n                    format: cid.codec,\n                    hashAlg: multihash.decode(cid.multihash).name\n                  });\n                  delete options.cid;\n                }\n\n                options = _objectSpread({\n                  format: 'dag-cbor',\n                  hashAlg: 'sha2-256',\n                  inputEnc: 'raw'\n                }, options);\n                number = multicodec.getNumber(options.format);\n                format = formats[number];\n\n                if (format) {\n                  _context.next = 18;\n                  break;\n                }\n\n                if (!(opts && opts.ipld && opts.ipld.loadFormat)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 15;\n                return opts.ipld.loadFormat(options.format);\n\n              case 15:\n                format = _context.sent;\n\n              case 16:\n                if (format) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options');\n\n              case 18:\n                if (!(!format.util || !format.util.serialize)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                throw new Error('Format does not support utils.serialize function');\n\n              case 20:\n                serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n                controller = new AbortController();\n                signal = anySignal([controller.signal, options.signal]);\n                _context.t0 = api;\n                _context.t1 = _objectSpread;\n                _context.t2 = {\n                  timeout: options.timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams(options)\n                };\n                _context.next = 28;\n                return multipartRequest(serialized, controller, options.headers);\n\n              case 28:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n                _context.next = 32;\n                return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n              case 32:\n                res = _context.sent;\n                _context.next = 35;\n                return res.json();\n\n              case 35:\n                data = _context.sent;\n                return _context.abrupt(\"return\", new CID(data.Cid['/']));\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _slicedToArray = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _regeneratorRuntime = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Multiaddr = require('multiaddr');\n\nvar toUri = require('multiaddr-to-uri');\n\nvar _require = require('ipfs-utils/src/env'),\n    isBrowser = _require.isBrowser,\n    isWebWorker = _require.isWebWorker;\n\nvar _require2 = require('iso-url'),\n    URL = _require2.URL;\n\nvar parseDuration = require('parse-duration').default;\n\nvar log = require('debug')('ipfs-http-client:lib:error-handler');\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar merge = require('merge-options');\n\nvar isMultiaddr = function isMultiaddr(input) {\n  try {\n    Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar normalizeInput = function normalizeInput() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (isMultiaddr(options)) {\n    options = {\n      url: toUri(options)\n    };\n  } else if (typeof options === 'string') {\n    options = {\n      url: options\n    };\n  }\n\n  var url = new URL(options.url);\n\n  if (options.apiPath) {\n    url.pathname = options.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (!options.url) {\n    if (isBrowser || isWebWorker) {\n      url.protocol = options.protocol || location.protocol;\n      url.hostname = options.host || location.hostname;\n      url.port = options.port || location.port;\n    } else {\n      url.hostname = options.host || 'localhost';\n      url.port = options.port || '5001';\n      url.protocol = options.protocol || 'http';\n    }\n  }\n\n  options.url = url;\n  return options;\n};\n\nvar errorHandler =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(response) {\n    var msg, data, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(response.headers.get('Content-Type') || '').startsWith('application/json')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return response.json();\n\n          case 4:\n            data = _context.sent;\n            log(data);\n            msg = data.Message || data.message;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return response.text();\n\n          case 11:\n            msg = _context.sent;\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            log('Failed to parse error response', _context.t0); // Failed to extract/parse error message from response\n\n            msg = _context.t0.message;\n\n          case 18:\n            error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n            if (msg && msg.includes('context deadline exceeded')) {\n              error = new HTTP.TimeoutError(response);\n            } // If we managed to extract a message from the response, use it\n\n\n            if (msg) {\n              error.message = msg;\n            }\n\n            throw error;\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n\n  return function errorHandler(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nvar kebabCase = function kebabCase(str) {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\nvar parseTimeout = function parseTimeout(value) {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n/**\n * @typedef {Object} ClientOptions\n * @prop {string} [host]\n * @prop {number} [port]\n * @prop {string} [protocol]\n * @prop {Headers|Record<string, string>} [headers] - Request headers.\n * @prop {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @prop {string} [apiPath] - Path to the API.\n * @prop {URL|string} [url] - Full API URL.\n */\n\n\nvar Client =\n/*#__PURE__*/\nfunction (_HTTP) {\n  _inherits(Client, _HTTP);\n\n  /**\n   *\n   * @param {ClientOptions|URL|Multiaddr|string} options\n   */\n  function Client() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    /** @type {ClientOptions} */\n    var opts = normalizeInput(options);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Client).call(this, {\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: normalizeInput(opts.url).toString(),\n      handleError: errorHandler,\n      transformSearchParams: function transformSearchParams(search) {\n        var out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = search[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n              out.append(kebabCase(key), value);\n            } // server timeouts are strings\n\n\n            if (key === 'timeout' && !isNaN(value)) {\n              out.append(kebabCase(key), value);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return out;\n      }\n    }));\n    delete _this.get;\n    delete _this.put;\n    delete _this.delete;\n    delete _this.options;\n    var fetch = _this.fetch;\n\n    _this.fetch = function (resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return fetch.call(_assertThisInitialized(_assertThisInitialized(_this)), resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n\n    return _this;\n  }\n\n  return Client;\n}(HTTP);\n\nClient.errorHandler = errorHandler;\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/neel/Desktop/Project/meme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar configure = require('./lib/configure');\n\nvar multipartRequest = require('./lib/multipart-request');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar anySignal = require('any-signal');\n\nvar AbortController = require('abort-controller').default;\n\nmodule.exports = configure(function (api) {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {import('../../ipfs/src/core/components/add-all').AddAll<import('.').HttpOptions>}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(input) {\n      var options,\n          progressFn,\n          controller,\n          signal,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          file,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              progressFn = options.progress; // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.t0 = _awaitAsyncGenerator;\n              _context.t1 = api;\n              _context.t2 = _objectSpread;\n              _context.t3 = {\n                searchParams: toUrlSearchParams(_objectSpread({\n                  'stream-channels': true\n                }, options, {\n                  progress: Boolean(progressFn)\n                })),\n                timeout: options.timeout,\n                signal: signal\n              };\n              _context.next = 10;\n              return _awaitAsyncGenerator(multipartRequest(input, controller, options.headers));\n\n            case 10:\n              _context.t4 = _context.sent;\n              _context.t5 = (0, _context.t2)(_context.t3, _context.t4);\n              _context.t6 = _context.t1.post.call(_context.t1, 'add', _context.t5);\n              _context.next = 15;\n              return (0, _context.t0)(_context.t6);\n\n            case 15:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 18;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 20:\n              _context.next = 22;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 22:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 26;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 26:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 39;\n                break;\n              }\n\n              file = _value;\n              file = toCamel(file);\n\n              if (!(file.hash !== undefined)) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.next = 33;\n              return toCoreInterface(file);\n\n            case 33:\n              _context.next = 36;\n              break;\n\n            case 35:\n              if (progressFn) {\n                progressFn(file.bytes || 0);\n              }\n\n            case 36:\n              _iteratorNormalCompletion = true;\n              _context.next = 20;\n              break;\n\n            case 39:\n              _context.next = 45;\n              break;\n\n            case 41:\n              _context.prev = 41;\n              _context.t7 = _context[\"catch\"](18);\n              _didIteratorError = true;\n              _iteratorError = _context.t7;\n\n            case 45:\n              _context.prev = 45;\n              _context.prev = 46;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 50;\n                break;\n              }\n\n              _context.next = 50;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 50:\n              _context.prev = 50;\n\n              if (!_didIteratorError) {\n                _context.next = 53;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 53:\n              return _context.finish(50);\n\n            case 54:\n              return _context.finish(45);\n\n            case 55:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[18, 41, 45, 55], [46,, 50, 54]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});\n/**\n * @typedef {import('../../ipfs/src/core/components/add-all').UnixFSEntry} UnixFSEntry\n */\n\n/**\n * @returns {UnixFSEntry}\n */\n\nfunction toCoreInterface(_ref) {\n  var name = _ref.name,\n      hash = _ref.hash,\n      size = _ref.size,\n      mode = _ref.mode,\n      mtime = _ref.mtime,\n      mtimeNsecs = _ref.mtimeNsecs;\n  var output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  } // @ts-ignore\n\n\n  return output;\n}","map":null,"metadata":{},"sourceType":"script"}